import os
import os.path as osp
import shutil
import dateutil
import argparse
from datetime import datetime as dt

from dotenv import load_dotenv

import pytorch_lightning as pl
from pytorch_lightning.utilities import parsing
from base_pl_model import BasePLModel
from config import (
    cfg_to_parser_args,
    cfg,
    cfg_from_file,
    rsetattr,
    flatten_json_iterative_solution,
)


def parse_args_and_set_config():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    cfg_parser_args = cfg_to_parser_args()
    for arg_name, arg_kwargs in cfg_parser_args.items():
        if "_" in arg_name:
            parser.add_argument(
                f"--{arg_name}", f"--{arg_name.replace('_', '-')}", **arg_kwargs,
            )
        else:
            parser.add_argument(f"--{arg_name}", **arg_kwargs)

    blacklist = ["kwargs", "gpus", "max_epochs", "max_nb_epochs"]
    depr_arg_names = pl.Trainer.get_deprecated_arg_names() + blacklist

    allowed_types = (str, float, int, bool)

    # TODO: get "help" from docstring :)
    for arg, arg_types, arg_default in (
        at
        for at in pl.Trainer.get_init_arguments_and_types()
        if at[0] not in depr_arg_names
    ):

        for allowed_type in (at for at in allowed_types if at in arg_types):
            if allowed_type is bool:

                def allowed_type(x):
                    return bool(parsing.strtobool(x))

            parser.add_argument(
                f"--{arg}",
                default=arg_default,
                type=allowed_type,
                dest=arg,
                help="autogenerated by pl.Trainer",
            )
            break

    args = parser.parse_args()
    cfg_from_file(args.cfg_file)
    for argname in cfg_parser_args.keys():
        arg_to_cfg(args, argname, cfg, argname)

    return args


def arg_to_cfg(arg, arg_name, cfg, cfg_attr_target):
    arg_value = getattr(arg, arg_name, None)
    if arg_value is not None:
        rsetattr(cfg, cfg_attr_target, arg_value)


if __name__ == "__main__":
    args = parse_args_and_set_config()

    model = BasePLModel(cfg)
    trainer = pl.Trainer.from_argparse_args(args, max_epochs=cfg.train.epochs)
    if args.eval:
        pass
    elif args.test:
        pass
    else:
        model.init_log()
